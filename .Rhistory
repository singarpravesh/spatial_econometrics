library(rvest) # web scrape tables
library(data.table) # for the rbindlist function
rs_driver_object <- rsDriver('chrome')
rs_driver_object <- rsDriver(browser = 'chrome')
sessionInfo()
rs_driver_object <- rsDriver(browser = 'chrome')
library(tidyverse) # for data wrangling
library(RSelenium) # activate Selenium server
library(netstat) # find unused port
library(rvest) # web scrape tables
library(data.table) # for the rbindlist function
rs_driver_object <- rsDriver(browser = 'chrome')
Sys.setenv(JAVA_HOME="C:/Program Files/Java/")
rs_driver_object <- rsDriver(browser = 'chrome')
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-22")
rs_driver_object <- rsDriver(browser = 'chrome')
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-22/")
rs_driver_object <- rsDriver(browser = 'chrome')
library(tidyverse) # for data wrangling
library(RSelenium) # activate Selenium server
library(netstat) # find unused port
library(rvest) # web scrape tables
library(data.table) # for the rbindlist function
rs_driver_object <- rsDriver(browser = 'chrome')
java_check()
library(tidyverse) # for data wrangling
library(RSelenium) # activate Selenium server
library(netstat) # find unused port
library(rvest) # web scrape tables
library(data.table) # for the rbindlist function
rs_driver_object <- rsDriver(browser = 'chrome')
binman::list_versions("chromedriver")
binman::list_versions("chromedriver")
rs_driver_object <- rsDriver(browser = 'chrome',
chromever = "126.0.6478.61",
verbose = F,
port = free_port())
rs_driver_object <- rsDriver(browser = 'chrome',
chromever = "114.0.5735.90",
verbose = F,
port = free_port())
library(tidyverse) # for data wrangling
library(RSelenium) # activate Selenium server
library(netstat) # find unused port
library(rvest) # web scrape tables
library(data.table) # for the rbindlist function
binman::list_versions("chromedriver")
binman::list_versions("chromedriver")$win64
binman::list_versions("chromedriver")
library(tidyverse) # for data wrangling
library(RSelenium) # activate Selenium server
library(netstat) # find unused port
library(rvest) # web scrape tables
library(data.table) # for the rbindlist function
binman::list_versions("chromedriver")
?binman::list_versions()
binman::list_versions("chromedriver", platform = "win64")
rs_driver_object <- rsDriver(browser = 'chrome',
chromever = "126.0.6478.62",
verbose = F, # verbose = F to suppress any messages
port = free_port()) # free_port() to find a free port to run the Selenium server
?rsDriver
rs_driver_object <- rsDriver(browser = 'chrome',
chromever = "latest",
verbose = F, # verbose = F to suppress any messages
port = free_port()) # free_port() to find a free port to run the Selenium server
rs_driver_object <- rsDriver(browser = 'firefox',
verbose = F, # verbose = F to suppress any messages
port = free_port()) # free_port() to find a free port to run the Selenium server
binman::list_versions("firefox")
rs_driver_object <- rsDriver(browser = 'chrome',
verbose = F, # verbose = F to suppress any messages
port = free_port()) # free_port() to find a free port to run the Selenium server
rs_driver_object <- rsDriver(browser = 'chrome',
verbose = F, # verbose = F to suppress any messages
port = free_port()) # free_port() to find a free port to run the Selenium server
rs_driver_object <- rsDriver(browser = 'chrome',
verbose = F) # verbose = F to suppress any messages
rs_driver_object <- rsDriver(browser = 'firefox',
verbose = F) # verbose = F to suppress any messages
library(tidyverse) # for data wrangling
library(RSelenium) # activate Selenium server
library(netstat) # find unused port
library(rvest) # web scrape tables
library(data.table) # for the rbindlist function
binman::list_versions("chromedriver")
rs_driver_object <- rsDriver(browser = 'chrome',
chromever = "114.0.5735.90",
verbose = F, # verbose = F to suppress any messages
port = free_port())
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
verbose = F, # verbose = F to suppress any messages
port = free_port())
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90")
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90")
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
check = "TRUE")
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
port = "netstat::free_port()")
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
port = netstat::free_port())
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
port = 14416)
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
port = 14416L)
rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
chromepath = "C:\Users\Pravesh\Downloads\chromedriver_win32\chromedriver.exe")
rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
chromepath = "C:\\Users\\Pravesh\\Downloads\\chromedriver_win32\\chromedriver.exe")
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
check = F)
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
port = 9515)
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
port = 9515L)
rs_driver_object$client
rs_driver_object$client
remDr <- rs_driver_object$client
remDr$open
remDr$navigate("https://www.99acres.com/search/property/buy/kolkata?city=25&preference=S&area_unit=1&res_com=R")
library(tidyverse) # for data wrangling
library(RSelenium) # activate Selenium server
library(netstat) # find unused port
library(rvest) # web scrape tables
library(data.table) # for the rbindlist function
rs_driver_object <- rsDriver(browser = "chrome")
library(tidyverse) # for data wrangling
install.packages(c("tidyverse", "RSelenium", "netstat", "rvest", "data.table"))
library(tidyverse) # for data wrangling
library(RSelenium) # activate Selenium server
library(netstat) # find unused port
library(rvest) # web scrape tables
library(data.table) # for the rbindlist function
rs_driver_object <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
port = 9515L)
# Load the necessary libraries
library(rvest)
library(dplyr)
# Define the URL for the property listings
url <- "file:///C:/Users/Pravesh/Downloads/Property%20in%20Kolkata%20-%20Real%20Estate%20in%20Kolkata.html"
# Send a GET request to the URL
page <- read_html(url)
# Define the URL for the property listings
url <- "Property in Kolkata - Real Estate in Kolkata.html"
# Send a GET request to the URL
page <- read_html(url)
page %>%
html_elements("div.configs_ccl2")
page %>%
html_elements("section") |>
html_elements("div.configs_ccl2")
page %>%
html_elements("section")
page %>%
html_elements("section") |>
html_elements("div")
page %>%
html_elements("section") |>
html_elements("div") |>
html_elements("div.configs_ccl2")
page %>%
html_elements("section") |>
html_elements("div") |>
html_elements("div")
page %>%
html_elements("section") |>
html_elements("div") |>
html_elements("div") |>
html_elements("div.configs_ccl2")
page %>%
html_elements("section")
locations <- page %>%
html_elements("section") |> html_table()
locations <- page %>%
html_elements("section") |> html_table("section")
# Send a GET request to the URL
page <- read_html("https://www.99acres.com/property-in-kolkata-ffid-page-1")
# Load the necessary libraries
library(rvest)
library(dplyr)
# Send a GET request to the URL
page <- read_html("https://www.99acres.com/property-in-kolkata-ffid-page-1")
binman::list_versions("chromedriver")
#install.packages('devtools')
#devtools::install_github('ropensci/rdhs')
library(rdhs)
library(tidyverse)
install.packages(c("AER", "backports", "bitops", "broom", "bslib", "caTools", "chromote", "cli", "colorspace", "curl", "data.table", "digest", "duckdb", "future", "gmp", "httr2", "knitr", "lme4", "minqa", "multcomp", "mvtnorm", "nloptr", "parallelly", "pbkrtest", "pkgload", "polyclip", "ps", "quantreg", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppSimdJson", "reprex", "rlang", "rmarkdown", "shiny", "SparseM", "spatialreg", "spatstat.geom", "spatstat.utils", "spData", "spdep", "stars", "stringi", "systemfonts", "testthat", "textshaping", "tinytex", "uuid", "waldo", "websocket", "xfun", "XML", "yaml"))
kr_data
#install.packages('devtools')
#devtools::install_github('ropensci/rdhs')
library(rdhs)
library(tidyverse)
# set your credentials
set_rdhs_config(email = "pravesh.econ@presiuniv.ac.in",
project = "ecological study of health")
kr
# download datasets
kr <- get_datasets(datasets$FileName[7] )
# dhs datasets
dhs_datasets(countryIds = "IA",
surveyYearStart = 2020, fileFormat = "Flat") -> datasets
str(datasets)
# download datasets
kr <- get_datasets(datasets$FileName[7] )
readRDS(kr$IAKR7EFL) -> kr_data
kr_data
search_variable_labels(kr_data, search_terms = "diarrhea")
kr_data_var_labels
kr_data_var_labels
get_variable_labels(kr_data) -> kr_data_var_labels
kr_data_var_labels
library(wooldridge)
install.packages('wooldridge')
library(wooldridge)
data(package = 'wooldridge')
?affairs
affairs
table(affairs$naffairs)
?wooldridge
??wooldridge
help(package = 'wooldridge')
getwd()
setwd("C:/Users/Pravesh/Desktop/SANDMINING-main/SANDMINING-main/IMAGE_CLASS_R/")
library(imager)
install.packages("imager")
library(imager)
library(xgboost)
library(randomForest)
library(caret)
# Function to load and preprocess images
preprocess_image <- function(image_path, size = 64) {
img <- load.image(image_path)
img_resized <- resize(img, size, size)
as.numeric(img_resized)
}
# Function to load images from a directory
load_images_from_directory <- function(directory, size = 64) {
files <- list.files(directory, full.names = TRUE, recursive = TRUE)
labels <- gsub(".*/(YES_SANDMINING|NO_SANDMINING)/.*", "\\1", files)
data <- lapply(files, preprocess_image, size = size)
matrix(unlist(data), nrow = length(data), byrow = TRUE)
}
# Load training and test images
train_dir <- "TRAINING"
test_dir <- "TEST"
X_train <- load_images_from_directory(train_dir, size = 64)
X_test <- load_images_from_directory(test_dir, size = 64)
# Create labels
y_train <- ifelse(grepl("YES_SANDMINING", list.files(train_dir, full.names = TRUE, recursive = TRUE)), 1, 0)
y_test <- ifelse(grepl("YES_SANDMINING", list.files(test_dir, full.names = TRUE, recursive = TRUE)), 1, 0)
# Train Random Forest model
rf_model <- randomForest(X_train, as.factor(y_train), ntree = 100)
# Predict on test set
predictions <- predict(rf_model, X_test)
# Evaluate model performance
confusionMatrix(predictions, as.factor(y_test))
#install.packages('devtools')
#devtools::install_github('ropensci/rdhs')
library(rdhs)
library(tidyverse)
# understanding grepl function
# creating a string variable
name <- c("CAR", "bIKE", "BICYCLE", "AEROPLANE")
name
# passing ignore.case argument to the grepl() function
grepl("bi", name, ignore.case = TRUE)
name[grepl("bi", name, ignore.case = TRUE)]
# what are the tags?
dhs_tags()
# Lets say we want to view tags related to Malaria
dhs_tags()[grepl("diarrhea", dhs_tags()$TagName, ignore.case = TRUE), ]
dhs_data(tagIds = 20, countryIds = c("IA"), surveyYearStart = 2019) -> ia
ia
#install.packages('devtools')
#devtools::install_github('ropensci/rdhs')
library(rdhs)
library(tidyverse)
dhs_indicators()[1,]
dhs_indicators()[1:5, "Definition"]
dhs_indicators()
dhs_indicators()[1,]
# Lets say we want to view tags related to Malaria
dhs_tags()[grepl("diarrhea", dhs_tags()$TagName, ignore.case = TRUE), ]
dhs_data(tagIds = 20, countryIds = c("IA"), surveyYearStart = 2019) -> ia
ia
dhs_data(countryIds = "IA", indicatorIds = "CH_DIAR_C_DIA", surveyYearStart = 2010) %>%
filter(ByVariableLabel == "Three years preceding the survey")
dhs_indicators(countryIds = "IA", indicatorIds = "CH_DIAR_C_DIA", )
# dhs datasets
dhs_datasets(countryIds = "IA",
surveyYearStart = 2020, fileFormat = "Flat") -> datasets
str(datasets)
# download datasets
kr <- get_datasets(datasets$FileName[7] )
mr <- get_datasets(datasets$FileName[8])
# read the data
readRDS(mr$IAMR7EFL) -> mr_data
readRDS(kr$IAKR7EFL) -> kr_data
# get variable labels
get_variable_labels(mr_data) -> mr_data_var_labels
get_variable_labels(kr_data) -> kr_data_var_labels
search_variable_labels(kr_data, search_terms = "diarrhea")
#install.packages('devtools')
#devtools::install_github('ropensci/rdhs')
library(rdhs)
library(tidyverse)
# dhs datasets
dhs_datasets(countryIds = "IA",
surveyYearStart = 2020, fileFormat = "Flat") -> datasets
str(datasets)
datasets
datasets$FileName[7]
datasets$FileName[7:8]
# search  the variables that we need after checking the labels
search_variables(datasets$FileName[7:8], variables = c('mv106', 'mv107', 'mv130'))-> variables
variables
# now extract the data
extract_dhs(variables, add_geo= TRUE) -> final_data_mr
final_data_mr
names(final_data_mr)
class(final_data_mr)
haven::zap_labels(final_data_mr)
haven::zap_labels(final_data_mr) %>% names()
haven::as_factor(final_data_mr) %>% names()
library(tibble)
as_tibble(final_data_mr)
as_tibble(final_data_mr)[1,]
as_tibble(final_data_mr)[1,][1]
as_tibble(final_data_mr)[1,][[1]]
final_data_mr %>%
summarise(mv107)
final_data_mr[1]
final_data_mr[1] %>%
summarise(mv107)
final_data_mr[1] %>% class()
final_data_mr[1] %>% as_tibble()
final_data_mr[1]
haven::as_factor(final_data_mr)
# Convert labelled columns to plain vectors
clean_data <- final_data_mr %>%
mutate(across(where(is.labelled), as.vector))
# Convert labelled columns to plain vectors
as_tibble(final_data_mr)
# Convert labelled columns to plain vectors
as_tibble(final_data_mr) %>%
mutate(across(where(~ inherits(.x, "haven_labelled")), as.vector))
# Convert labelled columns to plain vectors
as_tibble(final_data_mr) %>%
mutate(across(where(~ inherits(.x, "haven_labelled")), as.vector)) %>%
as_tibble()
final_data_mr
library(haven)
library(dplyr)
# Example list with a data frame containing haven_labelled columns
my_list <- list(
df1 = data.frame(
id = 1:3,
label_col = labelled(c(1, 2, 1), labels = c("A" = 1, "B" = 2))
),
df2 = data.frame(
id = 4:6,
label_col = labelled(c(2, 1, 2), labels = c("A" = 1, "B" = 2))
)
)
my_list
my_list[1]
my_list %>% class()
final_data_mr %>%
mutate(mv106 = haven::as_factor(mv106))
library(purrr)
# Example list with a data frame containing hvn_lbll columns
my_list <- list(
df1 = data.frame(
id = 1:3,
label_col = structure(c(1, 2, 1), class = "hvn_lbll")
),
df2 = data.frame(
id = 4:6,
label_col = structure(c(2, 1, 2), class = "hvn_lbll")
)
)
my_list
# Function to process hvn_lbll columns
process_hvn_lbll <- function(df) {
df %>%
mutate(across(where(~ inherits(.x, "hvn_lbll")), as.character)) # Or as_factor, as.vector
}
# Process all data frames in the list
my_list <- map(my_list, function(item) {
if (is.data.frame(item)) {
process_hvn_lbll(item)
} else {
item
}
})
# Combine into a single data frame
final_df <- bind_rows(my_list)
print(final_df)
class(final_df)
process_hvn_lbll <- function(df) {
df %>%
mutate(across(where(~ inherits(.x, "hvn_lbll")), as.character)) # Or as_factor, as.vector
}
# Process all data frames in the list
final_data_mr <- map(final_data_mr, function(item) {
if (is.data.frame(item)) {
process_hvn_lbll(item)
} else {
item
}
})
# Combine into a single data frame
final_df <- bind_rows(final_data_mr)
class(final_df)
# Combine into a single data frame
final_df <- bind_rows(final_data_mr) %>% as_tibble()
class(final_df)
final_df
# Combine into a single data frame
final_df <- bind_rows(final_data_mr) %>% as_tibble()
summary(final_df)
# Combine into a single data frame
final_df_mr <- bind_rows(final_data_mr) %>% as_tibble()
final_df_mr %>%
select(mv106, mv107, mv130) %>%
table() %>%
prop.table()
library(rdhs)
library(tidyverse)
# set your credentials
set_rdhs_config(email = "pravesh.econ@presiuniv.ac.in",
project = "ecological study of health")
# dhs datasets
dhs_datasets(countryIds = "IA",
surveyYearStart = 2020, fileFormat = "Flat") -> datasets
str(datasets)
# search  the variables that we need after checking the labels
search_variables(datasets$FileName, variables = c('v101', 'mv130'))-> variables
# set your credentials
set_rdhs_config(email = "pravesh.econ@presiuniv.ac.in",
project = "ecological study of health")
# dhs datasets
dhs_datasets(countryIds = "IA",
surveyYearStart = 2020, fileFormat = "Flat") -> datasets
# set your credentials
set_rdhs_config(email = "pravesh.econ@presiuniv.ac.in",
project = "ecological study of health",
config_path = "~/.rdhs.json",
data_frame = "data.table::as.data.table",
global = TRUE)
gc()
#install.packages('devtools')
#devtools::install_github('ropensci/rdhs')
library(rdhs)
library(tidyverse)
# set your credentials
set_rdhs_config(email = "pravesh.econ@presiuniv.ac.in",
project = "ecological study of health",
config_path = "~/.rdhs.json",
data_frame = "data.table::as.data.table",
global = TRUE)
# the first time we call this function, rdhs will make the API request
microbenchmark::microbenchmark(dhs_surveys(surveyYear = 2020),times = 1)
# dhs datasets
dhs_datasets(countryIds = "IA",
surveyYearStart = 2020, fileFormat = "Flat") -> datasets
str(datasets)
gc()
get_datasets(datasets$FileName, reformat = TRUE) -> all_data
?get_rdhs_config
get_rdhs_config()
# set your credentials
set_rdhs_config(email = "pravesh.econ@presiuniv.ac.in",
project = "ecological study of health",
config_path = "~/.rdhs.json",
data_frame = "data.table::as.data.table",
global = TRUE,
verbose_download = FALSE,
timeout = 1000,
password = "Bp24praban")
# set your credentials
set_rdhs_config(email = "pravesh.econ@presiuniv.ac.in",
project = "ecological study of health",
config_path = "~/.rdhs.json",
data_frame = "data.table::as.data.table",
global = TRUE,
verbose_download = FALSE,
timeout = 1000)
get_datasets(datasets$FileName, reformat = TRUE) -> all_data
# set your credentials
set_rdhs_config(email = "pravesh.econ@presiuniv.ac.in",
project = "ecological study of health",
config_path = "~/.rdhs.json",
data_frame = "data.table::as.data.table",
global = TRUE,
verbose_download = FALSE,
timeout = 1000)
