regression <- lm(chi_spatial_lag ~ chi$violent)
abline(regression, lwd = 2)
moran.plot(chi$violent, listw = nb2listw(chi_w))
moran.plot(chi$violent, listw = lag.listw(nb2listw(chi_w), chi$violent))
moran.plot(chi$violent, listw = nb2listw(chi_w))
moran.plot(chi$violent, listw = nb2listw(chi_w),
xlim = c(-1500, 1600))
stdev(chi$violent)
scale(chi$violent)
moran.plot(scale(chi$violent), listw = nb2listw(chi_w))
as.vector(scale(chi$violent))
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w))
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 18)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 19)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, plot = FALSE)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, quiet = TRUE)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, labels = FALSE)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, labels = as.character(chi$county))
table(chi$county)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, labels = FALSE)
shapiro.test(chi$violent)
ggplot(chi)+
geom_histogram(aes(violent))
ggplot(chi)+
geom_histogram(aes(log(violent)))
shapiro.test(log(chi$violent))
shapiro.test(log(na.omit(chi$violent)))
shapiro.test(log(chi$violent + 1))
shapiro.test(chi$violent)
localmoran(chi$violent, listw = nb2listw(chi_w), sim = 99) -> chi_local_moran
localmoran(chi$violent, listw = nb2listw(chi_w), randomisation = TRUE) -> chi_local_moran
?localmoran
localmoran(chi$violent, listw = nb2listw(chi_w)) -> chi_local_moran
chi_local_moran
chi_local_moran$I
names(chi_local_moran)
chi_local_moran$Ii
chi_local_moran %>%  class()
chi_local_moran[1]
chi_local_moran["Ii"]
chi_local_moran[["Ii"]]
chi_local_moran[, "Ii"]
library(rgeoda)
install.packages('rgeoda')
library(rgeoda)
?local_moran()
local_moran(w = nb2listw(chi_w), df = chi$violent)
local_moran(w = chi_w, df = chi$violent)
local_moran(w = queen_weights(chi), df = chi$violent)
queen_weights(chi)
class(chi)
local_moran(w = queen_weights(as.data.frame(chi)), df = chi$violent)
local_moran(w = queen_weights(chi), df = chi[,"violent"])
local_moran(w = queen_weights(chi), df = chi[,"violent"]) -> w
local_moran(w = queen_weights(chi), df = chi[,"violent"]) -> chi_local_moran
match_palette <- function(patterns, classifications, colors){
classes_present <- base::unique(patterns)
mat <- matrix(c(classifications,colors), ncol = 2)
logi <- classifications %in% classes_present
pre_col <- matrix(mat[logi], ncol = 2)
pal <- pre_col[,2]
return(pal)
}
lisa_map <- function(df, lisa, alpha = .05) {
clusters <- lisa_clusters(lisa,cutoff = alpha)
labels <- lisa_labels(lisa)
pvalue <- lisa_pvalues(lisa)
colors <- lisa_colors(lisa)
lisa_patterns <- labels[clusters+1]
pal <- match_palette(lisa_patterns,labels,colors)
labels <- labels[labels %in% lisa_patterns]
df["lisa_clusters"] <- clusters
tm_shape(df) +
tm_fill("lisa_clusters",labels = labels, palette = pal,style = "cat")
}
significance_map <- function(df, lisa, permutations = 999, alpha = .05) {
pvalue <- lisa_pvalues(lisa)
target_p <- 1 / (1 + permutations)
potential_brks <- c(.00001, .0001, .001, .01)
brks <- potential_brks[which(potential_brks > target_p & potential_brks < alpha)]
brks2 <- c(target_p, brks, alpha)
labels <- c(as.character(brks2), "Not Significant")
brks3 <- c(0, brks2, 1)
cuts <- cut(pvalue, breaks = brks3,labels = labels)
df["sig"] <- cuts
pal <- rev(brewer.pal(length(labels), "Greens"))
pal[length(pal)] <- "#D3D3D3"
tm_shape(df) +
tm_fill("sig", palette = pal)
}
lisa_map(chi, chi_local_moran)
library(tmap)
install.packages("tmap")
library(tmap)
lisa_map(chi, chi_local_moran)
significance_map(chi, chi_local_moran)
?brewer.pal
lisa_map(chi, chi_local_moran) +
tm_borders()
significance_map(chi, chi_local_moran)+
tm_borders()
tmap_mode("view")
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_layout(title = "Local Moran Cluster Map of Violent Crimes",legend.outside = TRUE)
local_moran(w = queen_weights(chi),
df = chi[,"violence"],
permutations = 999) -> chi_local_moran_permu
local_moran(w = queen_weights(chi),
df = chi[,"violent"],
permutations = 999) -> chi_local_moran_permu
# plot the map
lisa_map(chi, chi_local_moran_permu) +
tm_borders()
tmap_mode("map")
tmap_mode("plot")
# plot the map
lisa_map(chi, chi_local_moran_permu) +
tm_borders()
lisa_map(chi, chi_local_moran) +
tm_borders()
# compute the local moran using permutations
local_moran(w = queen_weights(chi),
df = chi[,"violent"],
permutations = 9999) -> chi_local_moran_permu
# plot the cluster map
lisa_map(chi, chi_local_moran_permu) +
tm_borders()
summary(chi$totpop)
summary(chi$bls_unemp)
factor(chi$bls_unemp, levels = c(2,4,6))
factor(chi$bls_unemp, levels = c(1:2,2:4,4:6))
factor(chi$bls_unemp, levels = c(1:1.999,2:4.999,5:6))
?cut()
cut(chi$bls_unemp, breaks = 2)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 2)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 4)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 6)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 5:6)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
cut(chi$bls_unemp, breaks = 5:6)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 10)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 20)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 2)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
library(maptools)
install.packages('maptools')
?local_geary()
library(rgeoda)
library(tmap)
local_geary(w = queen_weights(chi), chi[, "violent"]) -> chi_local_geary
# Chunk 1
library(sf)
library(tidyverse)
# Chunk 2
chi <- st_read("foreclosures/foreclosures.shp")
class(chi)
# Chunk 3
summary(chi$violent)
# Chunk 4
ggplot()+
geom_sf(data = chi)+
geom_sf(aes(fill = violent),
data = chi) +
scale_fill_distiller(palette = 7, direction = 1)
# Chunk 5
lm(violent ~ est_fcs_rt + bls_unemp, data = chi) -> chi_ols
summary(chi_ols)
# Chunk 6
library(spdep)
poly2nb(chi) -> chi_w
summary(chi_w)
# Chunk 7
nb2listw(chi_w)
# Chunk 8
library(spdep)
moran.plot(chi$violent, listw = nb2listw(chi_w),
pch = 20, labels = FALSE)
# Chunk 9
# scale() is used to standardize the variable of interest
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, labels = FALSE)
# Chunk 10
(spdep::moran.test(chi$violent, listw = nb2listw(chi_w)) -> chi_moran)
# Chunk 11
moran.test(chi$violent, listw = nb2listw(chi_w), randomisation = FALSE)
# Chunk 12
(moran.mc(chi$violent, listw = nb2listw(chi_w), nsim = 99) -> chi_mc)
# Chunk 13
plot(chi_mc)
polygon(density(chi_mc$res), col="blue")
# Chunk 14
library(RColorBrewer)
match_palette <- function(patterns, classifications, colors){
classes_present <- base::unique(patterns)
mat <- matrix(c(classifications,colors), ncol = 2)
logi <- classifications %in% classes_present
pre_col <- matrix(mat[logi], ncol = 2)
pal <- pre_col[,2]
return(pal)
}
lisa_map <- function(df, lisa, alpha = .05) {
clusters <- lisa_clusters(lisa,cutoff = alpha)
labels <- lisa_labels(lisa)
pvalue <- lisa_pvalues(lisa)
colors <- lisa_colors(lisa)
lisa_patterns <- labels[clusters+1]
pal <- match_palette(lisa_patterns,labels,colors)
labels <- labels[labels %in% lisa_patterns]
df["lisa_clusters"] <- clusters
tm_shape(df) +
tm_fill("lisa_clusters",labels = labels, palette = pal,style = "cat")
}
significance_map <- function(df, lisa, permutations = 999, alpha = .05) {
pvalue <- lisa_pvalues(lisa)
target_p <- 1 / (1 + permutations)
potential_brks <- c(.00001, .0001, .001, .01)
brks <- potential_brks[which(potential_brks > target_p & potential_brks < alpha)]
brks2 <- c(target_p, brks, alpha)
labels <- c(as.character(brks2), "Not Significant")
brks3 <- c(0, brks2, 1)
cuts <- cut(pvalue, breaks = brks3,labels = labels)
df["sig"] <- cuts
pal <- rev(brewer.pal(length(labels), "Greens"))
pal[length(pal)] <- "#D3D3D3"
tm_shape(df) +
tm_fill("sig", palette = pal)
}
# Chunk 15
library(rgeoda)
library(tmap)
# calculate the local Moran's I
local_moran(w = queen_weights(chi), df = chi[,"violent"]) -> chi_local_moran
# Plot the cluster map
lisa_map(chi, chi_local_moran) +
tm_borders()
# Plot the significane map
significance_map(chi, chi_local_moran)+
tm_borders()
# Chunk 16
tmap_mode("view")
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_layout(title = "Local Moran Cluster Map of Violent Crimes",legend.outside = TRUE)
tmap_mode("plot")
# Chunk 17
# compute the local moran using permutations
local_moran(w = queen_weights(chi),
df = chi[,"violent"],
permutations = 9999) -> chi_local_moran_permu
# plot the cluster map
lisa_map(chi, chi_local_moran_permu) +
tm_borders()
# Chunk 18
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 2)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
# Chunk 19
# Calculate the local Geary
local_geary(w = queen_weights(chi), chi[, "violent"]) -> chi_local_geary
# Plot the cluster map
lisa_map(chi, chi_local_geary)+
tm_borders()
# Chunk 1
library(sf)
library(tidyverse)
# Chunk 2
chi <- st_read("foreclosures/foreclosures.shp")
class(chi)
# Chunk 3
summary(chi$violent)
# Chunk 4
ggplot()+
geom_sf(data = chi)+
geom_sf(aes(fill = violent),
data = chi) +
scale_fill_distiller(palette = 7, direction = 1)
# Chunk 5
lm(violent ~ est_fcs_rt + bls_unemp, data = chi) -> chi_ols
summary(chi_ols)
# Chunk 6
library(spdep)
poly2nb(chi) -> chi_w
summary(chi_w)
# Chunk 7
nb2listw(chi_w)
# Chunk 8
library(spdep)
moran.plot(chi$violent, listw = nb2listw(chi_w),
pch = 20, labels = FALSE)
# Chunk 9
# scale() is used to standardize the variable of interest
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, labels = FALSE)
# Chunk 10
(spdep::moran.test(chi$violent, listw = nb2listw(chi_w)) -> chi_moran)
# Chunk 11
moran.test(chi$violent, listw = nb2listw(chi_w), randomisation = FALSE)
# Chunk 12
(moran.mc(chi$violent, listw = nb2listw(chi_w), nsim = 99) -> chi_mc)
# Chunk 13
plot(chi_mc)
polygon(density(chi_mc$res), col="blue")
# Chunk 14
library(RColorBrewer)
match_palette <- function(patterns, classifications, colors){
classes_present <- base::unique(patterns)
mat <- matrix(c(classifications,colors), ncol = 2)
logi <- classifications %in% classes_present
pre_col <- matrix(mat[logi], ncol = 2)
pal <- pre_col[,2]
return(pal)
}
lisa_map <- function(df, lisa, alpha = .05) {
clusters <- lisa_clusters(lisa,cutoff = alpha)
labels <- lisa_labels(lisa)
pvalue <- lisa_pvalues(lisa)
colors <- lisa_colors(lisa)
lisa_patterns <- labels[clusters+1]
pal <- match_palette(lisa_patterns,labels,colors)
labels <- labels[labels %in% lisa_patterns]
df["lisa_clusters"] <- clusters
tm_shape(df) +
tm_fill("lisa_clusters",labels = labels, palette = pal,style = "cat")
}
significance_map <- function(df, lisa, permutations = 999, alpha = .05) {
pvalue <- lisa_pvalues(lisa)
target_p <- 1 / (1 + permutations)
potential_brks <- c(.00001, .0001, .001, .01)
brks <- potential_brks[which(potential_brks > target_p & potential_brks < alpha)]
brks2 <- c(target_p, brks, alpha)
labels <- c(as.character(brks2), "Not Significant")
brks3 <- c(0, brks2, 1)
cuts <- cut(pvalue, breaks = brks3,labels = labels)
df["sig"] <- cuts
pal <- rev(brewer.pal(length(labels), "Greens"))
pal[length(pal)] <- "#D3D3D3"
tm_shape(df) +
tm_fill("sig", palette = pal)
}
# Chunk 15
library(rgeoda)
library(tmap)
# calculate the local Moran's I
local_moran(w = queen_weights(chi), df = chi[,"violent"]) -> chi_local_moran
# Plot the cluster map
lisa_map(chi, chi_local_moran) +
tm_borders()
# Plot the significane map
significance_map(chi, chi_local_moran)+
tm_borders()
# Chunk 16
tmap_mode("view")
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_layout(title = "Local Moran Cluster Map of Violent Crimes",legend.outside = TRUE)
tmap_mode("plot")
# Chunk 17
# compute the local moran using permutations
local_moran(w = queen_weights(chi),
df = chi[,"violent"],
permutations = 9999) -> chi_local_moran_permu
# plot the cluster map
lisa_map(chi, chi_local_moran_permu) +
tm_borders()
# Chunk 18
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 2)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
# Chunk 19
# Calculate the local Geary
local_geary(w = queen_weights(chi), chi[, "violent"]) -> chi_local_geary
# Plot the cluster map
lisa_map(chi, chi_local_geary)+
tm_borders()
# Plot the significance map
significance_map(chi, chi_local_geary)
# Plot the significance map
significance_map(chi, chi_local_geary) +
tm_borders()+
tm_layout("Loal Geary Significance Map", legend.outside = TRUE)
# Calculate the G statistic
rgeoda::local_g(w = queen_weights(chi), chi[, "violent"]) -> chi_local_g
# cluster map
lisa_map(chi, chi_local_g) +
tm_borders()
# Significance map
significance_map(chi, chi_local_g)+
tm_borders()
# Calculate the G statistic
rgeoda::local_gstar(w = queen_weights(chi), chi[, "violent"]) -> chi_local_gstar
# cluster map
lisa_map(chi, chi_local_gstar) +
tm_borders()
# Significance map
significance_map(chi, chi_local_gstar)+
tm_borders()
# cluster map with alpha = 0.01 and permutations = 9999
lisa_map(chi, chi_local_gstar, permutations = 9999, alpha = 0.01) +
tm_borders()
# cluster map with alpha = 0.01
lisa_map(chi, chi_local_gstar, alpha = 0.01) +
tm_borders()
# Significance map
significance_map(chi, chi_local_gstar, permutations = 9999, alpha = 0.01)+
tm_borders()
?local_gstar
spdep::lm.LMtests(chi, listw = queen_weights(chi))
spdep::lm.LMtests(chi, listw = nb2listw(chi))
spdep::lm.LMtests(chi, listw = nb2listw(chi_w))
?lm.LMtests
spdep::lm.LMtests(chi_ols, listw = nb2listw(chi_w))
spdep::lm.LMtests(chi_ols, listw = nb2listw(chi_w))
lm.RStests()
?lm.RStests()
# The robust LM test
spdep::lm.Rstests(chi_ols, listw = nb2listw(chi_w),
test = "RSlag")
# The robust LM test
spdep::lm.RStests(chi_ols, listw = nb2listw(chi_w),
test = "RSlag")
# The LM test spatial lag
spdep::lm.RStests(chi_ols, listw = nb2listw(chi_w),
test = "RRSlag")
# The LM test spatial lag
spdep::lm.RStests(chi_ols, listw = nb2listw(chi_w),
test = "adjRSlag")
install.packages('spatialreg')
library(spatialreg)
?lagsarlm()
# MLE of spatial autoregressive models
lagsarlm(violent ~ est_fcs_rt + bls_unemp,
data = chi,
listw = nb2listw(chi_w), zero.policy = TRUE)
# MLE of spatial autoregressive models
lagsarlm(violent ~ est_fcs_rt + bls_unemp,
data = chi,
listw = nb2listw(chi_w), zero.policy = TRUE) %>% summary()
# Load the necessary libraries
library(rvest)
library(dplyr)
# Define the URL for the property listings
url <- "https://www.99acres.com/search/property/buy/kolkata?city=25&keyword=kolkata&preference=S&area_unit=1&res_com=R"
# Send a GET request to the URL
page <- read_html(url)
# Send a GET request to the URL
page <- read_html_live(url)
# Send a GET request to the URL
page <- read_html_live(url)
page
page %>%  html_elements("section")
page$View()
sess <- read_html_live("https://www.forbes.com/top-colleges/")
sess$view()
sess %>% html_elements(".TopColleges2023_tableRow__BYOSU")
sess$view()
sess <- read_html_live("https://www.forbes.com/top-colleges/")
sess$view()
