install.packages('rgdal')
# read the shape file
pov_shape <- terra::vect("cb_2018_us_state_500k.shp")
pov_shape
names(pov_shape)
View(pov_shape)
plot(pov_shape)
terra::vect('sptdmg3.shp') -> shp
plot(shp)
plot(shp$PUNMP00)
plot(shp, 'PUNMP00')
names(shp)
plot(shp, c('PUNMP00', 'ACSAIR'))
shp
# First create the spatial weight matrix
swm <- adjacent(shp, 'queen', pairs = FALSE)
View(swm)
mi <- autocor(shp$LNP1000, swm, "moran")
mi
install.packages("spdep")
length(shp)
# Calculate Expected Maran's I under null hypothesis
n <- length(shp)
ei <- -1/(n - 1)
ei
# Analytical approach to test significance
library(spdep)
?moran.test
# Create a vector object
pts <- vect(data.frame(x = runif(100, 0, 100), y = runif(100, 0, 100), value = rnorm(100)))
# Load necessary packages
library(terra)
library(spdep)
# Create a vector object
pts <- vect(data.frame(x = runif(100, 0, 100), y = runif(100, 0, 100), value = rnorm(100)))
data.frame(x = runif(100, 0, 100), y = runif(100, 0, 100)
)
data.frame(x = runif(100, 0, 100), y = runif(100, 0, 100), value = rnorm(100))
# Create a vector object
pts <- vect(data.frame(x = runif(100, 0, 100), y = runif(100, 0, 100), value = rnorm(100)))
?sapply
autocor(sample(shp$LNP1000), swm, "moran")
autocor(sample(shp$LNP1000), swm, "moran")
autocor(sample(shp$LNP1000), swm, "moran")
autocor(sample(shp$LNP1000), swm, "moran")
autocor(sample(shp$LNP1000), swm, "moran")
autocor(sample(shp$LNP1000), swm, "moran")
autocor(sample(shp$LNP1000), swm, "moran")
autocor(sample(shp$LNP1000), swm, "moran")
autocor(sample(shp$LNP1000), swm, "moran")
sample(shp$LNP1000)
sapply(1:99, function(i){
autocor(sample(shp$LNP1000), swm, "moran")
})
m <- sapply(1:99, function(i){
autocor(sample(shp$LNP1000), swm, "moran")
})
hist(m)
m <- sapply(1:99, function(i){
autocor(sample(shp$LNP1000), swm, "moran")
})
hist(m)
pval <- sum(m >= mi) / 100
pval
m <- sapply(1:99, function(i){
autocor(sample(shp$LNP1000), swm, "moran")
})
hist(m)
pval <- sum(m >= mi) / 100
pval
mi
# Let's read a file in the `sf` package
(st_read(system.file("gpkg/nc.gpkg", package = "sf")) -> nc)
library(sf)
# Let's read a file in the `sf` package
(st_read(system.file("gpkg/nc.gpkg", package = "sf")) -> nc)
# Let's read a file in the `sf` package
(st_read(system.file("gpkg/nc.gpkg", package = "sf")) -> nc)
plot(nc$NAME)
plot(nc)
plot(nc$NAME)
# Let's read a file in the `sf` package
(st_read(system.file("gpkg/nc.gpkg", package = "sf")) -> nc)
plot(nc[,5])
?st_write
plot(st_geometry(nc))
plot(st_geometry(nc[1:5]))
plot(st_geometry(nc[1:5, ]))
plot(st_geometry(nc[1:7, ]))
plot(st(geometry(st_intersects(nc[1:5, ]. nc[1:7, ])))
plot(st(geometry(st_intersects(nc[1:5, ], nc[1:7, ])))
plot(st(geometry(st_intersects(nc[1:5, ], nc[1:7, ]))))
plot(st_geometry(st_intersects(nc[1:5, ], nc[1:7, ])))
st_intersects(nc[1:5, ], nc[1:7, ])
st_intersects(nc[1:5, ], nc[1:7, ])
plot(st_geometry(nc[1:5,]))
plot(st_geometry(nc[1:7, ]), add= TRUE, border = "red")
plot(st_geometry(nc[1:5,]))
plot(st_geometry(nc[1:7, ]), add= TRUE, border = "red")
plot(st_geometry(nc[1:7,]))
plot(st_geometry(nc[1:5, ]), add= TRUE, border = "red")
tif <- system.file("tif/L7_ETMs.tif", package = "stars")
library(stars)
install.packages("stars")
library(stars)
tif <- system.file("tif/L7_ETMs.tif", package = "stars")
tif
r <- read_stars(tif)
r
plot(r)
r
plot(r)
r
(r <- read_stars(tif))
(r <- read_stars(tif))
tif <- system.file("tif/L7_ETMs.tif", package = "stars")
library(stars)
(r <- read_stars(tif))
st_intersects(nc[1:5, ], nc[1:7, ])
plot(st_geometry(nc[1:7,]))
plot(st_geometry(nc[1:5, ]), add= TRUE, border = "red")
library(sf)
# Let's read a file in the `sf` package
(st_read(system.file("gpkg/nc.gpkg", package = "sf")) -> nc)
st_layers(system.file("gpkg/nc.gpkg", package = "sf"))
plot(st_geometry(nc))
plot(st_geometry(nc[1:5, ]))
plot(st_geometry(nc[1:7, ]))
st_intersects(nc[1:5, ], nc[1:7, ])
plot(st_geometry(nc[1:7,]))
plot(st_geometry(nc[1:5, ]), add= TRUE, border = "red")
tif <- system.file("tif/L7_ETMs.tif", package = "stars")
library(stars)
(r <- read_stars(tif))
class(r)
class(r[1])
class(r[[1]])
r[[1]]
r[[2]]
library(tidyverse)
r %>%
filter(x > 5)
install.packages('cubelyr')
library(cubelyr)
r %>%
filter(x > 5)
r
r %>%
cubelyr::filter(x < 300000)
?cubelyr
r %>%
filter(x < 300000)
r %>%
filter(x < 300000) %>% dim()
r %>%
filter(x < 300000, y < 10000000) %>% dim()
r %>%
filter(x < 300000, y < 10000000)
r %>%
filter(x < 300000, x  < 10000000) %>% dim()
r %>%
filter(x < 300000, x  < 10000000)
?slice()
r %>%
slice(band, 2:3)
r %>%  slice(band, c(1,4,6))
r %>%  slice(band, 1:3)
r %>% slice(band, 2)
# Load necessary packages
library(terra)
library(spdep)
# Load example spatial data
data(meuse, package = "sp")
meuse
? meuse
data(package = "sp")
data(package = "terra")
data(package = "sf")
library(sf)
data(package = "sf")
library(spData)
data(package = "spData")
?spData
# Load example spatial data
data("baltimore", package = "spData") # use ?meuse to know more
coordinates(baltimore) <- ~x+y
library(sf)
coordinates(baltimore) <- ~x+y
?coordinates
library(sp)
coordinates(baltimore) <- ~x+y
coordinates(baltimore)
class(baltimore)
class(vect(baltimore))
coordinates(baltimore) <- ~ X+Y
coordinates(baltimore)
gridded(baltimore)
gridded(baltimore) <- TRUE
library(tidyverse)
ggplot()+
geom_sf(baltimore)
ggplot()+
geom_sf(aes(baltimore))
baltimore %>%
ggplot()+
geom_sf(aes(PRICE))
plot(baltimore)
plot(baltimore$PRICE)
# Load example spatial data
data("baltimore", package = "spData")
# Packages that we will need
library(maptools)
# Packages that we will need
install.packages("maptools", dependencies = TRUE)
library(maptools)
install.packages("spdep", dependencies = TRUE)
install.packages("spdep", dependencies = TRUE)
install.packages("leaflet", dependencies = TRUE)
install.packages("RColorBrewer", dependencies = TRUE)
library(spdep)
library(leaflet)
library(RColorBrewer)
library(maptools)
library(spdep)
chi <- st_read("foreclosures/foreclosures.shp")
class(chi)
summary(chi$violent)
plot(chi)
plot(chi$geometry)
leaflet(chi)
leaflet(chi$geometry)
plot(chi$violent)
library(tidyverse)
ggplot(data = chi)+
geom_sf(aes(geometry))
ggplot(data = chi)+
geom_sf(geometry)
ggplot()+
geom_sf(data = chi)
ggplot()+
geom_sf(data = chi)+
geom_sf(aes(fill = violent))
ggplot()+
geom_sf(data = chi)+
geom_sf(aes(fill = violent), data = chi)
ggplot()+
geom_sf(data = chi)+
geom_sf(aes(fill = violent),
data = chi) +
scale_fill_distiller(palette = 7, type = "div")
ggplot()+
geom_sf(data = chi)+
geom_sf(aes(fill = violent),
data = chi) +
scale_fill_distiller(palette = 7)
ggplot()+
geom_sf(data = chi)+
geom_sf(aes(fill = violent),
data = chi) +
scale_fill_distiller(palette = 7, direction = -1)
ggplot()+
geom_sf(data = chi)+
geom_sf(aes(fill = violent),
data = chi) +
scale_fill_distiller(palette = 7, direction = 1)
lm(violent ~ est_fcs_rt + bls_unemp, data = chi) -> chi_ols
chi_ols
summarise(chi_ols)
summary(chi_ols)
?st_read
summary(chi$violent)
?poly2nb
poly2nb(chi) -> chi_w
chi_w
summary(chi_w)
nb2listw(chi_w)
nb2listw(chi_w)
library(spdep)
nb2listw(chi_w)
nb2listw(chi_w) %>%  summary()
?nb2listw
spdep::moran.test(chi$violent, listw = nb2listw(chi_w)) -> chi_moran
chi_moran
summary(chi_moran)
moran.test(chi$violent, listw = nb2listw(chi_w), randomisation = FALSE)
moran.mc(chi$violent, listw = nb2listw(chi_w), nsim = 99)
moran.mc(chi$violent, listw = nb2listw(chi_w), nsim = 99) %>% class()
moran.mc(chi$violent, listw = nb2listw(chi_w), nsim = 99) %>% plot()
moran.mc(chi$violent, listw = nb2listw(chi_w), nsim = 99) %>% ggplot()+geom_density()
(moran.mc(chi$violent, listw = nb2listw(chi_w), nsim = 99) -> chi_mc)
chi_mc$res
plot(chi_mc)
polygon(density(chi_mc$res), col="blue")
chi_mc %>%
ggplot()+
geom_density(aes(chi_mc$res))
library(spdep)
?lag.listw
# Calculate the spatial lag of the variable `violent`
spatial_lag <- lag.listw(nb2listw(chi_w), chi$violent)
spatial_lag
# Calculate the spatial lag of the variable `violent`
chi_spatial_lag <- lag.listw(nb2listw(chi_w), chi$violent)
# Create the Moran scatter plot
plot(chi$violent, spatial_lag)
# Create the Moran scatter plot
plot(chi$violent, chi_spatial_lag)
regression <- lm(chi_spatial_lag ~ violent, data = chi)
abline(regression, lwd = 2)
# Create the Moran scatter plot
plot(chi$violent, chi_spatial_lag)
regression <- lm(chi_spatial_lag ~ chi$violent)
abline(regression, lwd = 2)
?moran.plot
moran.plot(chi$violent, listw = nb2listw(chi_w))
# Create the Moran scatter plot
plot(chi$violent, chi_spatial_lag)
# Create the Moran scatter plot
plot(chi$violent, chi_spatial_lag)
regression <- lm(chi_spatial_lag ~ chi$violent)
abline(regression, lwd = 2)
moran.plot(chi$violent, listw = nb2listw(chi_w))
moran.plot(chi$violent, listw = lag.listw(nb2listw(chi_w), chi$violent))
moran.plot(chi$violent, listw = nb2listw(chi_w))
moran.plot(chi$violent, listw = nb2listw(chi_w),
xlim = c(-1500, 1600))
stdev(chi$violent)
scale(chi$violent)
moran.plot(scale(chi$violent), listw = nb2listw(chi_w))
as.vector(scale(chi$violent))
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w))
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 18)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 19)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, plot = FALSE)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, quiet = TRUE)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, labels = FALSE)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, labels = as.character(chi$county))
table(chi$county)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20)
moran.plot(as.vector(scale(chi$violent)), listw = nb2listw(chi_w),
pch = 20, labels = FALSE)
shapiro.test(chi$violent)
ggplot(chi)+
geom_histogram(aes(violent))
ggplot(chi)+
geom_histogram(aes(log(violent)))
shapiro.test(log(chi$violent))
shapiro.test(log(na.omit(chi$violent)))
shapiro.test(log(chi$violent + 1))
shapiro.test(chi$violent)
localmoran(chi$violent, listw = nb2listw(chi_w), sim = 99) -> chi_local_moran
localmoran(chi$violent, listw = nb2listw(chi_w), randomisation = TRUE) -> chi_local_moran
?localmoran
localmoran(chi$violent, listw = nb2listw(chi_w)) -> chi_local_moran
chi_local_moran
chi_local_moran$I
names(chi_local_moran)
chi_local_moran$Ii
chi_local_moran %>%  class()
chi_local_moran[1]
chi_local_moran["Ii"]
chi_local_moran[["Ii"]]
chi_local_moran[, "Ii"]
library(rgeoda)
install.packages('rgeoda')
library(rgeoda)
?local_moran()
local_moran(w = nb2listw(chi_w), df = chi$violent)
local_moran(w = chi_w, df = chi$violent)
local_moran(w = queen_weights(chi), df = chi$violent)
queen_weights(chi)
class(chi)
local_moran(w = queen_weights(as.data.frame(chi)), df = chi$violent)
local_moran(w = queen_weights(chi), df = chi[,"violent"])
local_moran(w = queen_weights(chi), df = chi[,"violent"]) -> w
local_moran(w = queen_weights(chi), df = chi[,"violent"]) -> chi_local_moran
match_palette <- function(patterns, classifications, colors){
classes_present <- base::unique(patterns)
mat <- matrix(c(classifications,colors), ncol = 2)
logi <- classifications %in% classes_present
pre_col <- matrix(mat[logi], ncol = 2)
pal <- pre_col[,2]
return(pal)
}
lisa_map <- function(df, lisa, alpha = .05) {
clusters <- lisa_clusters(lisa,cutoff = alpha)
labels <- lisa_labels(lisa)
pvalue <- lisa_pvalues(lisa)
colors <- lisa_colors(lisa)
lisa_patterns <- labels[clusters+1]
pal <- match_palette(lisa_patterns,labels,colors)
labels <- labels[labels %in% lisa_patterns]
df["lisa_clusters"] <- clusters
tm_shape(df) +
tm_fill("lisa_clusters",labels = labels, palette = pal,style = "cat")
}
significance_map <- function(df, lisa, permutations = 999, alpha = .05) {
pvalue <- lisa_pvalues(lisa)
target_p <- 1 / (1 + permutations)
potential_brks <- c(.00001, .0001, .001, .01)
brks <- potential_brks[which(potential_brks > target_p & potential_brks < alpha)]
brks2 <- c(target_p, brks, alpha)
labels <- c(as.character(brks2), "Not Significant")
brks3 <- c(0, brks2, 1)
cuts <- cut(pvalue, breaks = brks3,labels = labels)
df["sig"] <- cuts
pal <- rev(brewer.pal(length(labels), "Greens"))
pal[length(pal)] <- "#D3D3D3"
tm_shape(df) +
tm_fill("sig", palette = pal)
}
lisa_map(chi, chi_local_moran)
library(tmap)
install.packages("tmap")
library(tmap)
lisa_map(chi, chi_local_moran)
significance_map(chi, chi_local_moran)
?brewer.pal
lisa_map(chi, chi_local_moran) +
tm_borders()
significance_map(chi, chi_local_moran)+
tm_borders()
tmap_mode("view")
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_layout(title = "Local Moran Cluster Map of Violent Crimes",legend.outside = TRUE)
local_moran(w = queen_weights(chi),
df = chi[,"violence"],
permutations = 999) -> chi_local_moran_permu
local_moran(w = queen_weights(chi),
df = chi[,"violent"],
permutations = 999) -> chi_local_moran_permu
# plot the map
lisa_map(chi, chi_local_moran_permu) +
tm_borders()
tmap_mode("map")
tmap_mode("plot")
# plot the map
lisa_map(chi, chi_local_moran_permu) +
tm_borders()
lisa_map(chi, chi_local_moran) +
tm_borders()
# compute the local moran using permutations
local_moran(w = queen_weights(chi),
df = chi[,"violent"],
permutations = 9999) -> chi_local_moran_permu
# plot the cluster map
lisa_map(chi, chi_local_moran_permu) +
tm_borders()
summary(chi$totpop)
summary(chi$bls_unemp)
factor(chi$bls_unemp, levels = c(2,4,6))
factor(chi$bls_unemp, levels = c(1:2,2:4,4:6))
factor(chi$bls_unemp, levels = c(1:1.999,2:4.999,5:6))
?cut()
cut(chi$bls_unemp, breaks = 2)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 2)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 4)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 6)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 5:6)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
cut(chi$bls_unemp, breaks = 5:6)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 10)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 20)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
chi$cut_bls_unemp <- cut(chi$bls_unemp, breaks = 2)
lisa_map(chi, chi_local_moran) +
tm_borders()+
tm_facets(by = "cut_bls_unemp",
free.coords = FALSE,
drop.units = FALSE)
